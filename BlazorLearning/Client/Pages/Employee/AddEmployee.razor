@page "/employee/add"
@page "/employee/edit/{empId:int}"
@using BlazorLearning.Shared.ViewModel
@inject HttpClient Http
@inject NavigationManager NavigationManager
<h1>@Title Employee</h1>
<hr />
<EditForm Model="@employee" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employee.Name" />
        </div>
        <ValidationMessage For="@(() => employee.Name)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Address</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employee.Address" />
        </div>
        <ValidationMessage For="@(() => employee.Address)" />
    </div>
    <div class="mb-3">
        <label for="Cellnumber" class="form-label">Cell No</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employee.MobileNumber" />
        </div>
        <ValidationMessage For="@(() => employee.MobileNumber)" />
    </div>
    <div class="mb-3">
        <label for="Emailid" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="employee.EmailId" />
        </div>
        <ValidationMessage For="@(() => employee.EmailId)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public int empId { get; set; }
    protected string Title = "Add";
    protected EmployeeViewModel employee = new();
    protected override async Task OnParametersSetAsync()
    {
        if (empId != 0)
        {
            Title = "Edit";
            Console.WriteLine("edit employee" + empId);
            employee = await Http.GetFromJsonAsync<EmployeeViewModel>("api/employee/fetchEmployeeById/" + empId);
        }
    }
    protected async Task SaveUser()
    {
        if (employee.Id != 0)
        {
            await Http.PutAsJsonAsync("api/Employee/update", employee);
        }
        else
        {
            await Http.PostAsJsonAsync("api/Employee/create", employee);
        }
        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/fetchemployeedetails");
    }
}